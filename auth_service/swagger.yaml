openapi: 3.0.0
info:
  title: API для аутентификации администраторов
  description: API для регистрации и аутентификации администраторов.
  version: 1.0.0
servers:
  - url: http://156.253.220.36:5000/api
    description: Локальный сервер разработки

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /register:
    post:
      summary: Зарегистрировать нового администратора
      description: Регистрирует администратора с именем пользователя и паролем.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin123"
                password:
                  type: string
                  example: "securepassword"
                firstName:
                  type: string
                  example: "Иван"
                lastName:
                  type: string
                  example: "Иванов"
                email:
                  type: string
                  example: "admin@example.com"
      responses:
        "201":
          description: Администратор успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Администратор зарегистрирован"
                  adminId:
                    type: integer
                    example: 1
        "400":
          description: Отсутствуют обязательные поля (имя пользователя или пароль)
        "500":
          description: Ошибка на сервере

  /login:
    post:
      summary: Войти в систему как администратор
      description: Осуществляет вход администратора по имени пользователя и паролю.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin123"
                password:
                  type: string
                  example: "securepassword"
      responses:
        "200":
          description: Вход в систему успешен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Вход успешен"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: Отсутствуют имя пользователя или пароль
        "401":
          description: Неверные данные для входа
        "500":
          description: Ошибка на сервере

  /admins:
    get:
      summary: Получить список всех администраторов
      description: Возвращает список всех зарегистрированных администраторов.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список администраторов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: "admin123"
                    first_name:
                      type: string
                      example: "Иван"
                    last_name:
                      type: string
                      example: "Иванов"
                    email:
                      type: string
                      example: "admin@example.com"
        "401":
          description: Неавторизованный доступ, требуется аутентификация
        "500":
          description: Ошибка на сервере

  /protected:
    get:
      summary: Пример защищённого маршрута
      description: Это защищённый маршрут, доступ к которому возможен только после аутентификации.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Успешный доступ к защищённому маршруту
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Это защищённый маршрут"
